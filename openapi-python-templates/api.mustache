# flake8: noqa E501
import json
from asyncio import get_event_loop
from typing import Any, Awaitable, Dict, IO, List, TYPE_CHECKING
from datetime import date, datetime, timedelta
from uuid import UUID
from enum import Enum
from pathlib import PurePath
from types import GeneratorType
from typing import TYPE_CHECKING, Awaitable, List, Any, Union, Set, Dict, Callable, Tuple

from pydantic.json import ENCODERS_BY_TYPE
from pydantic.main import BaseModel

from @IMPORT_NAME@ import models as m

SetIntStr = Set[Union[int, str]]
DictIntStrAny = Dict[Union[int, str], Any]


def generate_encoders_by_class_tuples(
    type_encoder_map: Dict[Any, Callable]
) -> Dict[Callable, Tuple]:
    encoders_by_classes: Dict[Callable, List] = {}
    for type_, encoder in type_encoder_map.items():
        encoders_by_classes.setdefault(encoder, []).append(type_)
    encoders_by_class_tuples: Dict[Callable, Tuple] = {}
    for encoder, classes in encoders_by_classes.items():
        encoders_by_class_tuples[encoder] = tuple(classes)
    return encoders_by_class_tuples


encoders_by_class_tuples = generate_encoders_by_class_tuples(ENCODERS_BY_TYPE)


def jsonable_encoder(
    obj: Any,
    include: Union[SetIntStr, DictIntStrAny] = None,
    exclude=None,
    by_alias: bool = True,
    skip_defaults: bool = None,
    exclude_unset: bool = False,
    include_none: bool = True,
    custom_encoder=None,
    sqlalchemy_safe: bool = True,
) -> Any:
    if exclude is None:
        exclude = set()
    if custom_encoder is None:
        custom_encoder = {}
    if include is not None and not isinstance(include, set):
        include = set(include)
    if exclude is not None and not isinstance(exclude, set):
        exclude = set(exclude)
    if isinstance(obj, BaseModel):
        encoder = getattr(obj.Config, "json_encoders", {})
        if custom_encoder:
            encoder.update(custom_encoder)
        obj_dict = obj.dict(
            include=include,
            exclude=exclude,
            by_alias=by_alias,
            exclude_unset=bool(exclude_unset or skip_defaults),
        )

        return jsonable_encoder(
            obj_dict,
            include_none=include_none,
            custom_encoder=encoder,
            sqlalchemy_safe=sqlalchemy_safe,
        )
    if isinstance(obj, Enum):
        return obj.value
    if isinstance(obj, PurePath):
        return str(obj)
    if isinstance(obj, (str, int, float, type(None))):
        return obj
    if isinstance(obj, dict):
        encoded_dict = {}
        for key, value in obj.items():
            if (
                (
                    not sqlalchemy_safe
                    or (not isinstance(key, str))
                    or (not key.startswith("_sa"))
                )
                and (value is not None or include_none)
                and ((include and key in include) or key not in exclude)
            ):
                encoded_key = jsonable_encoder(
                    key,
                    by_alias=by_alias,
                    exclude_unset=exclude_unset,
                    include_none=include_none,
                    custom_encoder=custom_encoder,
                    sqlalchemy_safe=sqlalchemy_safe,
                )
                encoded_value = jsonable_encoder(
                    value,
                    by_alias=by_alias,
                    exclude_unset=exclude_unset,
                    include_none=include_none,
                    custom_encoder=custom_encoder,
                    sqlalchemy_safe=sqlalchemy_safe,
                )
                encoded_dict[encoded_key] = encoded_value
        return encoded_dict
    if isinstance(obj, (list, set, frozenset, GeneratorType, tuple)):
        encoded_list = []
        for item in obj:
            encoded_list.append(
                jsonable_encoder(
                    item,
                    include=include,
                    exclude=exclude,
                    by_alias=by_alias,
                    exclude_unset=exclude_unset,
                    include_none=include_none,
                    custom_encoder=custom_encoder,
                    sqlalchemy_safe=sqlalchemy_safe,
                )
            )
        return encoded_list

    if custom_encoder:
        if type(obj) in custom_encoder:
            return custom_encoder[type(obj)](obj)
        else:
            for encoder_type, encoder in custom_encoder.items():
                if isinstance(obj, encoder_type):
                    return encoder(obj)

    if type(obj) in ENCODERS_BY_TYPE:
        return ENCODERS_BY_TYPE[type(obj)](obj)
    for encoder, classes_tuple in encoders_by_class_tuples.items():
        if isinstance(obj, classes_tuple):
            return encoder(obj)

    errors: List[Exception] = []
    try:
        data = dict(obj)
    except Exception as e:
        errors.append(e)
        try:
            data = vars(obj)
        except Exception as e:
            errors.append(e)
            raise ValueError(errors)
    return jsonable_encoder(
        data,
        by_alias=by_alias,
        exclude_unset=exclude_unset,
        include_none=include_none,
        custom_encoder=custom_encoder,
        sqlalchemy_safe=sqlalchemy_safe,
    )



if TYPE_CHECKING:
    from @IMPORT_NAME@.api_client import ApiClient


{{#operations}}
class _{{classname}}:
    def __init__(self, api_client: "ApiClient"):
        self.api_client = api_client

{{#operation}}
    def _build_for_{{operationId}}(self, {{#allParams}}{{#required}}{{paramName}}: {{>_dataTypeApi}}{{/required}}{{^required}}{{paramName}}: {{>_dataTypeApi}} = None{{/required}}{{#hasMore}}, {{/hasMore}}{{/allParams}}) -> Awaitable[{{>_returnType}}]:
{{#notes}}
        """
        {{{notes}}}
        """
{{/notes}}
{{#pathParams.0}}
        path_params = {
{{#pathParams}}
{{#required}}
            "{{baseName}}": str({{paramName}}){{#hasMore}},{{/hasMore}}
{{/required}}
{{/pathParams}}
        }
{{#pathParams}}
{{^required}}
        if {{paramName}} is not None:
            path_params["{{baseName}}"] = str({{paramName}})
{{/required}}
{{/pathParams}}

{{/pathParams.0}}
{{#queryParams.0}}
        query_params = {
{{#queryParams}}
{{#required}}
            "{{baseName}}": str({{paramName}}){{#hasMore}},{{/hasMore}}
{{/required}}
{{/queryParams}}
        }
{{#queryParams}}
{{^required}}
        if {{paramName}} is not None:
            query_params["{{baseName}}"] = {{#isListContainer}}[str({{paramName}}_item) for {{paramName}}_item in {{paramName}}]{{/isListContainer}}{{^isListContainer}}str({{paramName}}){{/isListContainer}}
{{/required}}
{{/queryParams}}

{{/queryParams.0}}
{{#headerParams.0}}
        headers = {
{{#headerParams}}
{{#required}}
            "{{baseName}}": str({{paramName}})
{{/required}}
{{/headerParams}}
        }
{{#headerParams}}
{{^required}}
        if {{paramName}} is not None:
            headers["{{baseName}}"] = str({{paramName}})
{{/required}}
{{/headerParams}}

{{/headerParams.0}}
{{#cookieParams.0}}
        cookies = {
{{#cookieParams}}
{{#required}}
            "{{baseName}}": str({{paramName}})
{{/required}}
{{/cookieParams}}
        }
{{#cookieParams}}
{{^required}}
        if {{paramName}} is not None:
            cookies["{{baseName}}"] = str({{paramName}})
{{/required}}
{{/cookieParams}}

{{/cookieParams.0}}
{{#formParams.0}}
        files: Dict[str, IO[Any]] = {}  # noqa F841
        data: Dict[str, Any] = {}  # noqa F841
{{#formParams}}
{{#required}}
        {{#isFile}}files{{/isFile}}{{^isFile}}data{{/isFile}}["{{baseName}}"] = {{paramName}}
{{/required}}
{{/formParams}}
{{#formParams}}
{{^required}}
        if {{paramName}} is not None:
            {{#isFile}}files{{/isFile}}{{^isFile}}data{{/isFile}}["{{baseName}}"] = {{paramName}}
{{/required}}
{{/formParams}}

{{/formParams.0}}
{{#bodyParam}}
        body = jsonable_encoder({{paramName}})

{{/bodyParam}}
        return self.api_client.request(
            type_={{>_returnType}},
            method="{{httpMethod}}",
            url="{{{path}}}",
            {{#pathParams.0}}path_params=path_params,{{/pathParams.0}}
            {{#queryParams.0}}params=query_params,{{/queryParams.0}}
            {{#headerParams.0}}headers=headers,{{/headerParams.0}}
            {{#cookieParams.0}}cookies=cookies,{{/cookieParams.0}}
            {{#formParams.0}}data=data,
            files=files{{^isMultipart}} or None{{/isMultipart}}{{/formParams.0}}
            {{#bodyParam}}json=body{{/bodyParam}}
        )

{{/operation}}
{{/operations}}

{{#operations}}
class Async{{classname}}(_{{classname}}):
{{#operation}}
    async def {{operationId}}(self, {{#allParams}}{{#required}}{{paramName}}: {{>_dataTypeApi}}{{/required}}{{^required}}{{paramName}}: {{>_dataTypeApi}} = None{{/required}}{{#hasMore}}, {{/hasMore}}{{/allParams}}) -> {{>_returnType}}:
{{#notes}}
        """
        {{{notes}}}
        """
{{/notes}}
        return await self._build_for_{{operationId}}({{#allParams}}{{paramName}}={{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}})

{{/operation}}
{{/operations}}

{{#operations}}
class Sync{{classname}}(_{{classname}}):
{{#operation}}
    def {{operationId}}(self, {{#allParams}}{{#required}}{{paramName}}: {{>_dataTypeApi}}{{/required}}{{^required}}{{paramName}}: {{>_dataTypeApi}} = None{{/required}}{{#hasMore}}, {{/hasMore}}{{/allParams}}) -> {{>_returnType}}:
{{#notes}}
        """
        {{{notes}}}
        """
{{/notes}}
        coroutine = self._build_for_{{operationId}}({{#allParams}}{{paramName}}={{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}})
        return get_event_loop().run_until_complete(coroutine)
{{/operation}}
{{/operations}}